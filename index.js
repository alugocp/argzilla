const validate=require("./validate.js");
const argparse=require("./argparse.js");
const swamp=require("../../swamp");
const fs=require("fs");

// Generates Swamp GAST
function generateAST(lang,config){
  let nodes=swamp.nodes;
  let options=[];
  let flags=[];
  let proc=[];

  // Get current element from argv
  proc.push(nodes.def_var("e",nodes.type("string"),nodes.array_get(nodes.get_var("argv"),nodes.get_var("i"))));

  // Handle flag parameters from config
  for(var a=0;a<(config.flags || []).length;a++){
    let flag=config.flags[a];
    flags.push(nodes.def_var(flag.label,nodes.type("boolean")));
    for(var b=0;b<(flag.names || []).length;b++) proc.push(nodes.if_stmt(
      nodes.eq(nodes.get_var("e"),nodes.value("string",flag.names[b])),[
        nodes.set_var(nodes.comp_get(nodes.comp_get(nodes.get_var("args"),"flags"),flag.label),nodes.value("boolean",true)),
        nodes.cont_stmt()
      ]
    ));
  }

  // Handle option parameters from config
  for(var a=0;a<(config.options || []).length;a++){
    let option=config.options[a];
    options.push(nodes.def_var(option.label,nodes.type("string")));
    for(var b=0;b<(option.names || []).length;b++) proc.push(nodes.if_stmt(
      nodes.eq(nodes.get_var("e"),nodes.value("string",option.names[b])),[
        nodes.if_stmt(
          nodes.eq(nodes.get_var("i"),nodes.sub(nodes.get_var("argc"),nodes.value("int",1))),
          [
            nodes.comment("Throw an error here please"),
            nodes.ret_stmt(nodes.value("null"))
          ]
        ),
        nodes.set_var("i",nodes.add(nodes.get_var("i"),nodes.value("int",1))),
        nodes.set_var(
          nodes.comp_get(nodes.comp_get(nodes.get_var("args"),"options"),option.label),
          nodes.array_get(nodes.get_var("argv"),nodes.get_var("i"))
        ),
        nodes.cont_stmt()
      ]
    ));
  }

  // Handle params
  proc.push(nodes.array_push(nodes.comp_get("args","params"),nodes.get_var("e")));
  let params_check=null;
  if(config.parameters){
    var conditions=[];
    if(config.parameters.min!=undefined){
      conditions.push(nodes.lt(nodes.array_len(nodes.comp_get("args","params")),nodes.value("int",config.parameters.min)));
    }
    if(config.parameters.max!=undefined){
      conditions.push(nodes.gt(nodes.array_len(nodes.comp_get("args","params")),nodes.value("int",config.parameters.max)));
    }
    if(conditions.length==1) conditions=conditions[0];
    else conditions=nodes.or(conditions[0],conditions[1]);
    params_check=nodes.if_stmt(conditions,[
      nodes.comment("Throw an error here please, invalid number of params"),
      nodes.ret_stmt(nodes.value("null"))
    ]);
  }

  // Tree root for GAST
  return [
    nodes.comment("This code was generated by Argzilla (brought to you by LugoCorp)"),
    nodes.def_comp_type("ArgOptions",options),
    nodes.def_comp_type("ArgFlags",flags),
    nodes.def_comp_type("ArgBox",[
      nodes.def_var("params",nodes.type("array",nodes.type("string"))),
      nodes.def_var("options",nodes.type("ArgOptions")),
      nodes.def_var("flags",nodes.type("ArgFlags")),
    ]),
    nodes.def_func("argparse",nodes.type("int"),[
      nodes.def_var("argc",nodes.type("int")),
      nodes.def_var("argv",nodes.type("array",nodes.type("string")))
    ],[
      nodes.def_var("args",nodes.type("ArgBox")),
      nodes.for_loop("i",nodes.value("int",0),nodes.get_var("argc"),nodes.value("int",1),proc),
      params_check,
      nodes.ret_stmt(nodes.get_var("args"))
    ])
  ]
}

// Call argparse
let result=argparse(process.argv);
let config=fs.readFileSync(result.options.in || "argzilla.json").toString();
try{
  config=JSON.parse(config);
}catch(err){
  throw new Error("Invalid Argzilla config file given");
}
validate(config);

// Handle init
if(result.params.length && result.params[0]=="init"){
  console.log(`{\n\t"language":"node",\n\t"out":"argparse.js",\n\t"options":[],\n\t"flags":[]\n}`);
  process.exit(0);
}

// Write output
let lang=result.options.lang || config.language;
let GAST=generateAST(lang,config);
swamp.setAST(GAST);
let output=swamp.render(lang);
if(result.flags.print) console.log(output);
else fs.writeFileSync(result.options.out || config.out,output);
