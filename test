#!/usr/bin/env python3
import subprocess as sub
import sys

# Helper functions
def delete(file):
    sub.run(["rm","-rf",file])
def argzilla(lang,out):
    sub.run(["argzilla","-l",lang,"-o",out])

# Testing base
class Test:
    def __init__(self,name,args):
        self.name=name
        self.args=args
class Tester:
    def _test(self): pass
    def compile(self): pass
    def test(self,test):
        sys.stdout.write("%s..."%test.name)
        sys.stdout.flush()
        cmd=self._test()
        cmd.extend(test.args)
        res=sub.run(cmd,stdout=sub.DEVNULL,stderr=sub.DEVNULL)
        code=res.returncode
        if code: sys.stdout.write("\u001b[31mFailure\u001b[0m\n")
        else: sys.stdout.write("\u001b[32mSuccess\u001b[0m\n")

# Testers bank
class BashTester(Tester):
    def compile(self):
        delete("tests/argparse.sh")
        argzilla("bash","tests/argparse.sh")
    def name(self): return "Bash"
    def _test(self): return ["bash","tests/test.sh"]
class LuaTester(Tester):
    def compile(self):
        delete("tests/argparse.lua")
        argzilla("lua","tests/argparse.lua")
    def name(self): return "Lua"
    def _test(self): return ["lua5.3","tests/test.lua"]
class NodeTester(Tester):
    def compile(self):
        delete("tests/argparse.js")
        argzilla("node","tests/argparse.js")
    def name(self): return "Node.js"
    def _test(self): return ["nodejs","tests/test.js"]
class PythonTester(Tester):
    def compile(self):
        delete("tests/argparse.py")
        argzilla("python","tests/argparse.py")
    def name(self): return "Python"
    def _test(self): return ["python","tests/test.py"]
class RubyTester(Tester):
    def compile(self):
        delete("tests/argparse.rb")
        argzilla("ruby","tests/argparse.rb")
    def name(self): return "Ruby"
    def _test(self): return ["ruby","tests/test.rb"]
class CppTester(Tester):
    def compile(self):
        delete("tests/argparse.cpp")
        argzilla("cpp","tests/argparse.cpp")
        delete("tests/a.out")
        sub.run(["g++","tests/test.cpp","-o","tests/a.out"])
    def name(self): return "C++"
    def _test(self): return ["./tests/a.out"]

# Tests
tests=[
    Test("no_args",[]),
    Test("args1",["-p","-l","ruby","yo","sup"])
]

# Main
testers=[BashTester(),LuaTester(),NodeTester(),PythonTester(),RubyTester(),CppTester()]

for tester in testers:
    sys.stdout.write("\u001b[4m%s\u001b[0m\n"%tester.name())
    tester.compile()
    for test in tests:
        tester.test(test)
    print("")
